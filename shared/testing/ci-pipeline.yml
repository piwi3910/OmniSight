# CI Pipeline configuration for OmniSight

name: OmniSight CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      # Install and build shared library
      - name: Install shared library
        run: |
          cd shared
          npm ci
          npm run build
      
      # Test each service
      - name: Test API Gateway
        run: |
          cd services/api-gateway
          npm ci
          npm test
      
      - name: Test Metadata Events
        run: |
          cd services/metadata-events
          npm ci
          npm test
      
      - name: Test Object Detection
        run: |
          cd services/object-detection
          npm ci
          npm test
      
      - name: Test Recording
        run: |
          cd services/recording
          npm ci
          npm test
      
      - name: Test Stream Ingestion
        run: |
          cd services/stream-ingestion
          npm ci
          npm test
      
      - name: Test Frontend
        run: |
          cd services/frontend
          npm ci
          npm test
      
      # Run integration tests
      - name: Integration Tests
        run: |
          cd services/api-gateway
          npm run test:integration
  
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      # Install dependencies for all services
      - name: Install dependencies
        run: |
          cd shared
          npm ci
          npm run build
          cd ../services/api-gateway
          npm ci
          cd ../metadata-events
          npm ci
          cd ../object-detection
          npm ci
          cd ../recording
          npm ci
          cd ../stream-ingestion
          npm ci
      
      # Generate coverage reports
      - name: Generate coverage
        run: |
          cd services/api-gateway
          npm run test:coverage
          cd ../metadata-events
          npm run test:coverage
          cd ../object-detection
          npm run test:coverage
          cd ../recording
          npm run test:coverage
          cd ../stream-ingestion
          npm run test:coverage
      
      # Upload coverage reports
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Build each service
      - name: Build API Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./services/api-gateway
          push: false
          tags: omnisight/api-gateway:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Metadata Events
        uses: docker/build-push-action@v4
        with:
          context: ./services/metadata-events
          push: false
          tags: omnisight/metadata-events:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Object Detection
        uses: docker/build-push-action@v4
        with:
          context: ./services/object-detection
          push: false
          tags: omnisight/object-detection:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Recording
        uses: docker/build-push-action@v4
        with:
          context: ./services/recording
          push: false
          tags: omnisight/recording:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Stream Ingestion
        uses: docker/build-push-action@v4
        with:
          context: ./services/stream-ingestion
          push: false
          tags: omnisight/stream-ingestion:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./services/frontend
          push: false
          tags: omnisight/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max